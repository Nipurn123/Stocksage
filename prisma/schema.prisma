generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(uuid())
  name               String?
  email              String                  @unique
  emailVerified      DateTime?
  password           String
  image              String?
  role               String                  @default("user")
  businessName       String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  accounts           Account[]
  barcodes           Barcode[]
  categories         Category[]
  customers          Customer[]
  dashboardData      DashboardData?
  daybookEntries     DaybookEntry[]
  daybookTags        DaybookTag[]
  financialDashboard FinancialDashboardData?
  financialReports   FinancialReport[]
  invoices           Invoice[]
  journal            JournalEntry[]
  notifications      Notification[]
  products           Product[]
  profiles           Profile[]
  sessions           Session[]
  shipments          Shipment[]
  suppliers          Supplier[]
  transactions       Transaction[]
  settings           UserSettings?
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  theme                String   @default("light")
  notificationsEnabled Boolean  @default(true)
  language             String   @default("en")
  timeZone             String   @default("UTC")
  currency             String   @default("USD")
  dateFormat           String   @default("MM/DD/YYYY")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   @default("info")
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String   @default("bg-blue-500")
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String?
  sku             String?        @unique
  barcode         String?        @unique
  qrCodeData      String?
  categoryId      String?
  price           Float
  cost            Float?
  currentStock    Int            @default(0)
  minStockLevel   Int            @default(0)
  maxStockLevel   Int?
  reorderPoint    Int?
  reorderQuantity Int?
  location        String?
  image           String?
  weight          Float?
  weightUnit      String?        @default("kg")
  dimensions      String?
  supplierId      String?
  userId          String
  isActive        Boolean        @default(true)
  taxRate         Float?         @default(0)
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  inventoryLogs   InventoryLog[]
  orderItems      OrderItem[]
  user            User           @relation(fields: [userId], references: [id])
  supplier        Supplier?      @relation(fields: [supplierId], references: [id])
  category        Category?      @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  userId      String
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  user        User       @relation(fields: [userId], references: [id])
  products    Product[]
}

model InventoryLog {
  id             String   @id @default(cuid())
  productId      String
  quantity       Int
  quantityBefore Int
  quantityAfter  Int
  type           String
  reason         String?
  notes          String?
  reference      String?
  invoiceId      String?
  orderId        String?
  documentRef    String?
  locationFrom   String?
  locationTo     String?
  createdAt      DateTime @default(now())
  createdBy      String?
  cost           Float?
  product        Product  @relation(fields: [productId], references: [id])
}

model Barcode {
  id            String    @id @default(uuid())
  code          String    @unique
  type          String
  productId     String?
  description   String?
  dateGenerated DateTime  @default(now())
  lastScanned   DateTime?
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InventoryReport {
  id            String   @id @default(uuid())
  title         String
  description   String?
  type          String
  dateGenerated DateTime @default(now())
  data          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Supplier {
  id           String          @id @default(uuid())
  name         String
  contactName  String?
  email        String?
  phone        String?
  address      String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  taxId        String?
  notes        String?
  website      String?
  paymentTerms String?
  creditLimit  Float?
  isActive     Boolean         @default(true)
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  products     Product[]
  orders       PurchaseOrder[]
  user         User            @relation(fields: [userId], references: [id])
}

model PurchaseOrder {
  id            String      @id @default(uuid())
  orderNumber   String
  supplierId    String
  orderDate     DateTime
  expectedDate  DateTime?
  status        String      @default("DRAFT")
  total         Float
  tax           Float?
  shipping      Float?
  notes         String?
  receiveStatus String?
  receivedDate  DateTime?
  paymentStatus String      @default("PENDING")
  paymentDate   DateTime?
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  supplier      Supplier    @relation(fields: [supplierId], references: [id])
  shipments     Shipment[]
}

model OrderItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Float
  received        Int           @default(0)
  receivedAt      DateTime?
  total           Float
  notes           String?
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model Shipment {
  id               String        @id @default(uuid())
  shipmentNumber   String
  purchaseOrderId  String
  carrier          String?
  trackingNumber   String?
  status           String        @default("PENDING")
  estimatedArrival DateTime?
  actualArrival    DateTime?
  notes            String?
  userId           String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Customer {
  id               String    @id @default(uuid())
  name             String
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  taxId            String?
  notes            String?
  creditLimit      Float?
  stripeCustomerId String?   @unique
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  invoices         Invoice[]
  payments         Payment[]
}

model Invoice {
  id              String             @id @default(uuid())
  invoiceNumber   String
  customerId      String
  date            DateTime
  dueDate         DateTime
  totalAmount     Float
  taxAmount       Float?
  discountAmount  Float?
  paymentTerms    String?
  notes           String?
  status          String             @default("DRAFT")
  confidenceScore Float?
  stripeInvoiceId String?            @unique
  paymentStatus   String             @default("PENDING")
  pdfUrl          String?
  isCompliant     Boolean            @default(false)
  complianceNotes String?
  source          String?            @default("MANUAL")
  lastUpdated     DateTime?          @default(now())
  userId          String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  syncHistory     InventorySyncLog[]
  user            User?              @relation(fields: [userId], references: [id])
  customer        Customer           @relation(fields: [customerId], references: [id])
  items           InvoiceItem[]
  payments        Payment[]
}

model InvoiceItem {
  id          String    @id @default(uuid())
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  taxRate     Float?
  taxAmount   Float?
  discount    Float?
  invoiceId   String
  productSku  String?
  syncedWith  String?
  syncedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @default(uuid())
  amount        Float
  currency      String   @default("USD")
  status        String   @default("PENDING")
  paymentMethod String?
  transactionId String?  @unique
  invoiceId     String
  customerId    String
  paymentDate   DateTime
  notes         String?
  reference     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customer      Customer @relation(fields: [customerId], references: [id])
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
}

model InventorySyncLog {
  id        String   @id @default(uuid())
  invoiceId String
  system    String
  status    String
  message   String?
  syncedAt  DateTime @default(now())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
}

model FinancialReport {
  id        String   @id @default(uuid())
  title     String
  type      String
  startDate DateTime
  endDate   DateTime
  data      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String        @id @default(uuid())
  type           String
  amount         Float
  date           DateTime
  description    String
  category       String?
  reference      String?
  accountId      String?
  userId         String
  journalEntryId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  account        BankAccount?  @relation(fields: [accountId], references: [id])
}

model BankAccount {
  id            String        @id @default(uuid())
  name          String
  accountNumber String?
  bankName      String?
  balance       Float         @default(0)
  currency      String        @default("USD")
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
}

model JournalEntry {
  id           String        @id @default(uuid())
  date         DateTime
  reference    String?
  description  String
  debitTotal   Float
  creditTotal  Float
  isPosted     Boolean       @default(false)
  postingDate  DateTime?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model DashboardData {
  id               String   @id @default(uuid())
  userId           String   @unique
  totalSales       Float    @default(0)
  totalProducts    Int      @default(0)
  lowStockItems    Int      @default(0)
  outOfStockItems  Int      @default(0)
  salesSummary     String?
  recentActivities String?
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialDashboardData {
  id                 String   @id @default(uuid())
  userId             String   @unique
  revenueData        String?
  expenseData        String?
  cashflowData       String?
  profitLossData     String?
  accountsReceivable Float    @default(0)
  accountsPayable    Float    @default(0)
  lastUpdated        DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DaybookEntry {
  id        String       @id @default(uuid())
  title     String
  content   String
  date      DateTime
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      DaybookTag[] @relation("DaybookEntryToDaybookTag")
}

model DaybookTag {
  id        String         @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   DaybookEntry[] @relation("DaybookEntryToDaybookTag")

  @@unique([name, userId])
}
